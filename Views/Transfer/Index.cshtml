@{
    ViewData["Title"] = "Atomicity Demo";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .balance-display {
            background-color: #e8f4f8;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #2196F3;
        }
        .balance-item {
            margin: 10px 0;
            font-size: 18px;
            font-weight: bold;
        }
        .Virat { color: #d32f2f; }
        .Rohit { color: #388e3c; }
        .transfer-form {
            text-align: center;
            margin: 30px 0;
        }
        .btn-transfer {
            background-color: #2196F3;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .btn-transfer:hover {
            background-color: #1976D2;
        }
        .message {
            margin: 20px 0;
            padding: 15px;
            border-radius: 5px;
            font-weight: bold;
            text-align: center;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .instructions {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 20px;
            border-radius: 5px;
            margin-top: 30px;
        }
        .instructions h3 {
            color: #856404;
            margin-top: 0;
        }
        .instructions ul {
            color: #856404;
        }
        .crash-demo {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .crash-demo h4 {
            color: #721c24;
            margin-top: 0;
        }
        .crash-demo code {
            background-color: #f1f1f1;
            padding: 2px 5px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üè¶ Atomicity Demo: Money Transfer</h1>
        
        <div class="balance-display">
            <h3>üí∞ Initial Account Balances</h3>
            <div class="balance-item Virat"> Virat: $1,000.00</div>
            <div class="balance-item Rohit"> Rohit: $500.00</div>
        </div>

        @if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="message @(ViewBag.MessageType == "success" ? "success" : "error")">
                @ViewBag.Message
            </div>
        }

        <form class="transfer-form" method="post" action="/Transfer/ExecuteTransfer">
            <button type="submit" class="btn-transfer">
                üí∏ Transfer $100 from Virat to Rohit
            </button>
        </form>

        <div style="text-align: center; margin: 20px 0;">
            <a href="/Booking" style="background-color: #9C27B0; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                üé≠ Go to Isolation Levels Demo
            </a>
        </div>

        <div class="crash-demo">
            <h4>üî¨ Testing Atomicity (Crash Simulation)</h4>
            <p>To test database atomicity, you can uncomment the crash simulation in the controller:</p>
            <p>In <code>TransferController.cs</code>, line ~52, uncomment:</p>
            <code>// Environment.Exit(1);</code>
            <p>This will crash the application after debiting Virat but before crediting Rohit. Check the database to verify that both operations are rolled back due to the transaction.</p>
        </div>

        <div class="instructions">
            <h3>üìã Testing Instructions</h3>
            <ul>
                <li><strong>Before running:</strong> Make sure you have a PostgreSQL database with the connection details specified in the controller</li>
                <li><strong>Create the accounts table:</strong>
                    <pre>CREATE TABLE accounts (
    account_id VARCHAR(50) PRIMARY KEY,
    balance DECIMAL(10,2) NOT NULL
);

INSERT INTO accounts (account_id, balance) VALUES 
('Virat', 1000.00),
('Rohit', 500.00);</pre>
                </li>
                <li><strong>Normal operation:</strong> Click the transfer button and observe the success message</li>
                <li><strong>Test atomicity:</strong> Uncomment the crash simulation and run again - verify no partial transfers occur</li>
                <li><strong>Check database:</strong> Query the accounts table after each test to see the actual balances:
                    <code>SELECT * FROM accounts WHERE account_id IN ('Virat', 'Rohit');</code>
                </li>
            </ul>
        </div>
    </div>
</body>
</html>